{"version":3,"sources":["components/Slider.js","components/Menu.js","components/Sensors.js","App.js","serviceWorker.js","index.js"],"names":["Slider","state","val","props","default","onChange","e","setState","target","value","decVal","parseInt","handler","Fragment","this","name","type","min","max","className","defaultValue","Component","Menu","refContainer","element","container","DomEvent","disableScrollPropagation","changeOpacity","ref","sensor","images","imgID","date","src","Sensors","list","map","radar","Marker","position","location","onclick","changeSensor","bind","App","radars","id","path","boundingBox","imageOpacity","currentSensorId","currentImageID","console","log","getCurrentSensor","filter","axios","get","then","res","data","Map","center","zoom","zoomControl","TileLayer","url","detectRetina","minZoom","maxZoom","maxNativeZoom","tileSize","Browser","retina","ImageOverlay","bounds","opacity","zIndex","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4985beac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Slider extends Component {\r\n    state = {\r\n        val: this.props.default\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            val: e.target.value\r\n        });\r\n        var decVal = parseInt(e.target.value)/100;\r\n        this.props.handler(decVal);\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <p>{this.props.name + '  ' + this.state.val + \"%\"}</p>\r\n                <input \r\n                type=\"range\" \r\n                min={this.props.min} \r\n                max={this.props.max} \r\n                className=\"opacitySlider\" \r\n                defaultValue={this.props.default}\r\n                onChange={this.onChange}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slider\r\n","import React, { Component } from 'react'\r\nimport { DomEvent } from 'leaflet';\r\nimport Slider from './Slider'\r\n\r\nexport class Menu extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.container = null;\r\n    }\r\n\r\n    refContainer = (element) => {\r\n        this.container = element;\r\n        if(element){\r\n            DomEvent.disableScrollPropagation(element);\r\n        }\r\n    }\r\n\r\n    changeOpacity = (e) => {\r\n        //console.log(e);\r\n        this.props.changeOpacity(e);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"menu\" ref={this.refContainer}>\r\n                <div className=\"productHeader\">\r\n                    <h1>{this.props.sensor.name}</h1>\r\n                    <h1>{`PPI(dBZ) 0.5°`}</h1>\r\n                    <h1>{this.props.sensor.images[this.props.imgID].date}</h1>\r\n                </div>\r\n                <div className=\"scaleWrapper\">\r\n                    <img src=\"./test_scale.svg\" className=\"scale\"></img>\r\n                </div>\r\n                <div className=\"metadata\">\r\n                    <div className=\"left-metadata\">\r\n                        <p className=\"left-metadata-entry\">Skan:</p>\r\n                        <p className=\"left-metadata-entry\">Zasięg:</p>\r\n                        <p className=\"left-metadata-entry\">Rozdzielczość:</p>\r\n                    </div>\r\n                    <div className=\"right-metadata\">\r\n                        <p className=\"right-metadata-entry\">doppler</p>\r\n                        <p className=\"right-metadata-entry\">125km</p>\r\n                        <p className=\"right-metadata-entry\">0.5km/px</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"settings\">\r\n                    <Slider name=\"Przezroczystość:\" min=\"0\" max=\"100\" default=\"60\" handler={this.changeOpacity}/>\r\n                    <div className=\"toggleWrapper\">\r\n                        <div className=\"ipolSwitch\">\r\n                            <label className=\"switch\">\r\n                                <input type=\"checkbox\"/>\r\n                                <span className=\"slider round\"></span>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"ipolLegend\">\r\n                            <p>Interpolacja</p>\r\n                        </div>\r\n                    </div>\r\n                    <p>Prędkość animacji:</p>\r\n                    <input type=\"range\" min=\"0\" max=\"100\" defaultValue=\"60\" className=\"opacitySlider\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react'\r\nimport { Marker } from 'react-leaflet'\r\nimport L from 'leaflet';\r\n\r\nexport class Sensors extends Component {\r\n    render() {\r\n        return this.props.list.map(\r\n            (radar) => (<Marker position={radar.location} onclick={this.props.changeSensor.bind(this,radar)}/>)\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sensors\r\n","import React, { Component } from 'react';\nimport './App.css';\n//import Map from './components/Map';\nimport {Map, TileLayer, ImageOverlay} from 'react-leaflet';\nimport Control from 'react-leaflet-control';\nimport Menu from './components/Menu';\nimport Sensors from './components/Sensors';\nimport axios from 'axios';\nimport { Browser } from 'leaflet';\n \nclass App extends Component {\n  state = {\n    radars: [\n      {\n        name: \"null\",\n        location: [0.0,0.0],\n        id: \"null\",\n        images: [\n          {\n            path: \"\",\n            date: \"\"\n          }\n        ],\n        boundingBox: [[0.0, 0.0],\n        [0.0, 0.0]]\n      }\n    ],\n    imageOpacity: 0.6,\n    currentSensorId: \"null\",\n    currentImageID: 0\n  }\n\n  componentDidMount(){\n    axios.get('./radars.json').then(res => {\n      this.setState({\n        radars: res.data,\n        currentSensorId: \"LEG\",\n        currentImageID: 6\n      })\n    })\n  }\n\n  changeSensor = (radar) => {\n    console.log(radar.id);\n    this.setState({\n      currentSensorId: \"null\",\n      currentImageID: 0\n    });\n    this.setState({\n      currentSensorId: radar.id,\n      currentImageID: 6\n    });\n  }\n\n  changeOpacity = (e) => {\n    console.log(e);\n    this.setState(\n      {\n        imageOpacity: e\n      }\n    );\n  }\n\n  getCurrentSensor = () => {\n    return this.state.radars.filter( (radar) => radar.id === this.state.currentSensorId )[0]\n  }\n\n  render(){\n    return (\n      <Map center={[52.0,19.0]} zoom={8} zoomControl={false}>\n        <TileLayer url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\" \n        detectRetina={false} \n        minZoom={2}\n        maxZoom={18}\n        maxNativeZoom={17}\n        tileSize={Browser.retina ? 128 : 256} />\n        <ImageOverlay url={this.getCurrentSensor().images[this.state.currentImageID].path}\n        bounds={this.getCurrentSensor().boundingBox}\n          opacity={this.state.imageOpacity}\n          zIndex={899}/>\n          <Control position='topright' className=\"control\">\n            <Menu sensor={this.getCurrentSensor()} imgID={this.state.currentImageID} changeOpacity={this.changeOpacity}/>\n          </Control>\n          <Sensors list={this.state.radars} changeSensor={this.changeSensor}/>\n      </Map>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}